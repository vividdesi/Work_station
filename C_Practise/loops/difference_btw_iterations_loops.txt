Here is a comparison of `for`, `while`, and `do-while` loops with their syntax and examples:

1. **For Loop**

- **Description**: The `for` loop is used when the number of iterations is known beforehand.
 It includes initialization, condition, and increment/decrement in a single line.
  
- **Syntax**:
  ```c
  for(initialization; condition; increment/decrement) {
      // code block
  }
  ```

- **Example**:
  ```c
  for(int i = 0; i < 5; i++) {
      printf("%d ", i);
  }
  ```
  - This will print numbers 0 to 4.
  - **Initialization**: `int i = 0`  
  - **Condition**: `i < 5`  
  - **Increment**: `i++`  

-----------------------------------------------------------------------------------------------------------------------------------------
2. **While Loop**

- **Description**: The `while` loop is used when the number of iterations is not known beforehand.
 It runs as long as the condition evaluates to true. The condition is checked before the loop body is executed.

- **Syntax**:
  ```c
  while(condition) {
      // code block
  }
  ```

- **Example**:
  ```c
  int i = 0;
  while(i < 5) {
      printf("%d ", i);
      i++;
  }
  ```
  - This will print numbers 0 to 4.
  - The condition `i < 5` is checked before each iteration.
  
------------------------------------------------------------------------------------------------------------------------------------
3. **Do-While Loop**

- **Description**: The `do-while` loop is similar to the `while` loop, but the condition is checked **after** the
 loop body is executed. This ensures that the loop will run at least once, even if the condition is false initially.

- **Syntax**:
  ```c
  do {
      // code block
  } while(condition);
  ```

- **Example**:
  ```c
  int i = 0;
  do {
      printf("%d ", i);
      i++;
  } while(i < 5);
  ```
  - This will print numbers 0 to 4.
  - The body is executed at least once, even if the condition is false initially.

---------------------------------------------------------------------------------------------------------------------------------

Key Differences:

1. **For Loop**:
   - Best when you know the number of iterations beforehand.
   - All control components (initialization, condition, increment) are in one place.

2. **While Loop**:
   - Ideal when the number of iterations is not known.
   - The condition is checked before the loop starts, meaning the loop might not run at all if the condition is false from the beginning.

3. **Do-While Loop**:
   - Guarantees at least one execution of the loop because the condition is checked **after** the loop runs.
   - Useful when the loop needs to run at least once regardless of the condition.


